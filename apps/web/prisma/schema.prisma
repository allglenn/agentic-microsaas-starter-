// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Agent         Agent[]
    Task          Task[]
    ApiCall       ApiCall[]
    StripeCustomer StripeCustomer?
    Subscription  Subscription[]
    Payment       Payment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Agent {
    id          String   @id @default(cuid())
    name        String
    description String?
    prompt      String
    isActive    Boolean  @default(true)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    tasks       Task[]
}

model Task {
    id          String   @id @default(cuid())
    title       String
    description String?
    status      String   @default("pending") // pending, processing, completed, failed
    result      String?
    agentId     String
    agent       Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade)
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model ApiCall {
    id        String   @id @default(cuid())
    endpoint  String
    method    String
    status    Int
    duration  Int // in milliseconds
    userId    String?
    user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
    createdAt DateTime @default(now())
}

// Stripe-related models
model StripeCustomer {
    id                String   @id @default(cuid())
    userId            String   @unique
    stripeCustomerId  String   @unique
    email             String
    name              String?
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    subscriptions     Subscription[]
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model Subscription {
    id                    String   @id @default(cuid())
    userId                String
    stripeCustomerId      String
    stripeSubscriptionId  String   @unique
    stripePriceId         String
    status                String   // active, canceled, past_due, incomplete, etc.
    currentPeriodStart    DateTime
    currentPeriodEnd      DateTime
    cancelAtPeriodEnd     Boolean  @default(false)
    canceledAt            DateTime?
    trialStart            DateTime?
    trialEnd              DateTime?
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    stripeCustomer        StripeCustomer @relation(fields: [stripeCustomerId], references: [id], onDelete: Cascade)
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
}

model Payment {
    id                    String   @id @default(cuid())
    userId                String
    stripePaymentIntentId String   @unique
    amount                Decimal  @db.Decimal(10, 2)
    currency              String   @default("usd")
    status                String   // succeeded, failed, pending, etc.
    description           String?
    metadata              Json?
    user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
}

model WebhookEvent {
    id            String   @id @default(cuid())
    stripeEventId String   @unique
    eventType     String
    processed     Boolean  @default(false)
    data          Json?
    createdAt     DateTime @default(now())
    processedAt   DateTime?
}
